#+TITLE: My Private Emacs Config
以下记录windows下不依赖wsl的安装过程
* python环境
安装[[https://www.python.org/ftp/python/][python最新版]],绿色化则直接将安装目录复制，通过python [[https://bootstrap.pypa.io/get-pip.py][get-pip.py]]安装pip
* 安装emacs及依赖软件
下载[[https://corwin.bru.st/emacs-28/][emacs最新版]]
下载以下软件，将需要的文件放入对应目录
[[https://github.com/BurntSushi/ripgrep/releases][ripgrep]]
[[https://www.voidtools.com/zh-cn/downloads/][es]]
[[https://github.com/sharkdp/fd/releases][fd]]
[[https://udomain.dl.sourceforge.net/project/gnuwin32/coreutils/5.3.0/coreutils-5.3.0-bin.zip][coreutils]]
安装以下软件
[[https://gitforwindows.org/][git]]
[[https://www.voidtools.com/zh-cn/downloads/][everything]]
[[https://github.com/llvm/llvm-project/releases][llvm]]
通过pip安装
#+begin_src shell
  pip install epc PyStarDict orjson
#+end_src
* 需编译的软件
依赖[[https://github.com/msys2/msys2-installer/releases][msys2]]环境
[[https://github.com/vedang/pdf-tools#compiling-and-installing-the-epdfinfo-server-from-source-on-windows][epdfinfo]] : 可直接在配置好编译环境后直接M-x pdf-tools-install进行编译安装.
编译native-comp emacs
#+begin_src shell
  pacman --noconfirm -Syuu
  pacman --needed --noconfirm -S git base-devel mingw-w64-x86_64-toolchain autoconf automake mingw-w64-x86_64-gcc mingw-w64-x86_64-gcc-libs mingw-w64-x86_64-libgccjit mingw-w64-x86_64-binutils
  packages="mingw-w64-x86_64-xpm-nox mingw-w64-x86_64-libjpeg-turbo mingw-w64-x86_64-libtiff mingw-w64-x86_64-giflib mingw-w64-x86_64-libpng mingw-w64-x86_64-librsvg mingw-w64-x86_64-cairo mingw-w64-x86_64-harfbuzz mingw-w64-x86_64-jansson mingw-w64-x86_64-lcms2 mingw-w64-x86_64-gnutls mingw-w64-x86_64-zlib mingw-w64-x86_64-crt-git mingw-w64-x86_64-libmangle-git mingw-w64-x86_64-libwinpthread-git mingw-w64-x86_64-winpthreads-git mingw-w64-x86_64-winstorecompat-git mingw-w64-x86_64-sqlite3 mingw-w64-x86_64-tree-sitter"
  pacman --needed --noconfirm -S ${packages}
  git clone https://github.com/emacs-mirror/emacs.git
  cd emacs
  ./autogen.sh
  ./configure --with-native-compilation=aot --prefix=/e/local/emacs-install --with-tree-sitter
  make NATIVE_FULL_AOT=1 -j$(nproc)
  make install
  all_packages=${packages}
  while [[ "" != ${packages} ]];
  do
      depend_packages=`pacman -Qii ${packages} | grep Depends | sed -e 's,[>=][^ ]*,,g;s,Depends[^:]*:,,g;s,None,,g' | sed -e 's,[[:space:]][[:space:]]*,\n,g' | sort | uniq | sed -e '/^$/d'`
      depend_packages=`echo ${all_packages} ${all_packages} ${depend_packages} | sed -e 's,[[:space:]][[:space:]]*,\n,g' | sort | uniq -u`
      all_packages=`echo ${all_packages} ${packages} ${depend_packages} | sed -e 's,[[:space:]][[:space:]]*,\n,g' | sort | uniq`
      packages=${depend_packages}
  done
  files=`pacman -Ql $all_packages | cut -d ' ' -f 2 | sort | uniq | grep "/mingw64/" | sed -e "s,/mingw64/,,g" | grep -P -v '^(.*bin/((?!x86_64-w64-mingw32-)(?!addpm)(?!as)(?!ctags)(?!ebrowse)(?!emacs)(?!etags)(?!ld)(?!objdump)).*.exe$|.*doc|.*include|etc|var|share/((?!emacs)(?!icons)(?!info))|lib/((?!emacs)(?!gcc)(?![^/]*\.(a|o)$))|lib/.*\.exe|.*lib.*/lib((?!advapi32)(?!gcc\.a)(?!gcc_)(?!kernel32)(?!mingw32)(?!mingwex)(?!moldname)(?!msvcrt)(?!pthread)(?!shell32)(?!user32)).*\.a$|.*bin/[^.]*$|.*bin/.*\.py$)'`
  cd /mingw64 && zip deps.zip -9v $files && unzip deps.zip -d /e/local/emacs-deps && rm -f deps.zip
#+end_src
tree-sitter语言支持
#+begin_src shell
  git clone https://github.com/casouri/tree-sitter-module
  cd tree-sitter-module
  ./batch.sh
#+end_src
win下需要改生成文件后缀
* checkout emacs配置
#+begin_src shell
  git clone git@github.com:zhendong-zhang/.emacs.d.git ~/.emacs.d --recurse-submodules
#+end_src
